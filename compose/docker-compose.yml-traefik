version: '3.4'

networks:
  traefik:
    external: false

services:
## DNSMasq
  dnsmasq:
    image: leopere/dnsmasq
    ports:
      - '53:53/udp'
    expose:
      - 8080
    volumes:
      - './dnsmasq.conf:/etc/dnsmasq.conf'
    ## You can opt for the web panels built in auth or the traefik labels based auth.
    ## I would prefer to rely on the traefik one for consistency as its just http auth.
    environment:
      HTTP_USER: ""
      HTTP_PASS: ""
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    labels:
      # https://docs.traefik.io/user-guide/docker-and-lets-encrypt/
      - "traefik.backend=dnsmasq"
      - "traefik.docker.network=traefik"
      - "traefik.frontend.rule=Host:dnsmasq.EXAMPLE.COM"
      - "traefik.expose=true"
      - "traefik.port=8080"
      ## Enabling htaccess restrictions on the træfik monitor panel.
      # user:password, see https://docs.traefik.io/configuration/backends/docker/#on-containers
      ## echo $(htpasswd -nb USERNAME PASSWORD) | sed -e s/\\$/\\$\\$/g
      - traefik.frontend.auth.basic.users=USERNAME:$$apr1$$R2R1qy8L$$3Aif1Aa994oG0kpv4HqCk0
      ## Self Updating mechanism, set up for opt in only using LABELS_ONLY
      - "com.ouroboros.enable=true"
#####################
## Proxy container ##
#####################
## The major contributing guides for træfik:
## https://www.digitalocean.com/community/tutorials/how-to-use-traefik-as-a-reverse-proxy-for-docker-containers-on-ubuntu-16-04
  proxy:
    image: traefik:alpine
    command: --api --docker --docker.domain=docker.localhost --logLevel=DEBUG
    networks:
      - traefik
    restart: always
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
    expose:
      - 8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik.toml:/traefik.toml
      ## This is going to be stored by default in the following host dir in staging.
      #  There is a rate limit for how many issuances you can request per week.
      #  Because of this we will store the acme.json file persistently.
      - ./traefik/:/opt/traefik/
    labels:
      # https://docs.traefik.io/user-guide/docker-and-lets-encrypt/
      - "traefik.backend=proxy"
      - "traefik.docker.network=traefik"
      - "traefik.frontend.rule=Host:monitor.EXAMPLE.COM"
      - "traefik.expose=true"
      - "traefik.port=8080"
      ## Enabling htaccess restrictions on the træfik monitor panel.
      # user:password, see https://docs.traefik.io/configuration/backends/docker/#on-containers
      ## echo $(htpasswd -nb USERNAME PASSWORD) | sed -e s/\\$/\\$\\$/g
      - traefik.frontend.auth.basic.users=USERNAME:$$apr1$$R2R1qy8L$$3Aif1Aa994oG0kpv4HqCk0
      ## Self Updating mechanism, set up for opt in only using LABELS_ONLY
      - "com.ouroboros.enable=true"
    healthcheck:
       test: ["CMD", "traefik", "healthcheck"]
       timeout: 10s
       retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  #############
  ## Updater ##
  #############
  ouroboros:
    container_name: ouroboros
    hostname: ouroboros
    image: pyouroboros/ouroboros
    environment:
      - CLEANUP=true
      - INTERVAL=300
      - LOG_LEVEL=info
      - SELF_UPDATE=true
      - IGNORE=mongo influxdb postgres mariadb
      - TZ=America/Chicago
      - LABELS_ONLY=true
      - LABEL_ENABLE=true
    labels:
      ## If you want ouroboros to self update you can set this next entry to true
      - com.ouroboros.enable=false
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
